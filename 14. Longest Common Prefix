思路：采用 divide and conquer 分治法
分治的具体步骤：
step1 分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题；
step2 解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题
step3 合并：将各个子问题的解合并为原问题的解。
例如：
/***
    leetcode    leet    lee    leetco
     \           /       \        /
	leet                 lee
	  \                   /
		   lee
***/

char* commonPrefix(char** strs, int start, int end);
char* comparePrefix(char* a, char* b);

char* longestCommonPrefix(char** strs, int strsSize) {
    if (strsSize == 0) 
        return "";
    else if (strsSize == 1)
        return strs[0];
    else
        return commonPrefix(strs, 0, strsSize-1);
}

char* commonPrefix(char** strs, int start, int end) {
    if (start == end)
        return strs[start];
    else {
        int mid = (start + end) / 2;
        char* leftLCP = commonPrefix(strs, start, mid); //递归求解
        char* rightLCP = commonPrefix(strs, mid+1, end);
        return comparePrefix(leftLCP, rightLCP); //比较相同部分
    }   
}

char* comparePrefix(char* a, char* b) {    //Compare string a, b then return the prefix
    if (a[0] == '\0' || b[0] == '\0')
        return "";
    else {
        int minLength = (strlen(a) < strlen(b)) ? strlen(a) : strlen(b);
        char* LCP = malloc((minLength+1)*sizeof(char)); //注意这里为(minLength+1)，否则数组会越界
        
        int i;
        for (i  = 0; i < minLength; i++) {
            if (a[i] == b[i])
                LCP[i] = a[i];
            else
                break;
        }

        LCP[i] = '\0';

        return LCP; 
    }       
}
